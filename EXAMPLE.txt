
Reproduction test example for a Drupal container image


Usually container images are stateless and the configurations of the follow up developer get encapsulated in a new overlay layer. The effective filesystem of container image edited by multiple developers behaves like a layered piecework; bottom layers get effective where the layer(s) on top have holes (, to be specific do not provide the corresponding directory/ file/ link). However, there are also new stateful so called 2nd generation container images with an ordinary on-premise-installer (e.g. the docker images of Wordpress, Joomla and Drupal). When the follow-up developer has done an edit of one or more configuration files, then there might -- in the out-of-order and speculative bare metal processing of the CPU -- show up concurrent file attributes of the configuration file, when running the ordinary on-premise-installer. Which often crashes the installation process or causes other erratic behaviour later on, especially if there are many of such edited installer files. To avoid this, the follow-up developer can perform the configuration edits, respectively the preliminary reproduction test, that simulates a maximum configuration of any file in the image, as follows:


Step 1: Downloading the Drupal image and exporting it
mkdir -m 777 <imageorigfolder>
cd <imageorigfolder>
sudo docker/ podman pull drupal:latest
sudo docker/ podman run -d drupalcontainer drupal:latest
sudo docker/ podman export drupalcontainer > imageorig.tar
sudo tar -xf imageorig.tar
sudo rm imageorig.tar


Step 2: Filling the imageworkfolder

A1) Configuration alternative:
cd <imageorigfolder>
sudo find -P * -name *.conf > /tmp/ta.man
cd ..
sudo /bin/reprod.sh -g -t=m <imageorigfolder> <imageworkfolder>
Follow-up developer configurations in <imageworkfolder>

A2) Reproduction test alternative (simulating a 100% configuration):
sudo /bin/reprod.sh -g <imageorigfolder> <imageworkfolder>


Step 3: Finalization
sudo /bin/reprod.sh -m=cp <imageworkfolder> <imagefinalfolder>


Step 4: Creating the new test container image

Create the following Dockerfile in an editor:
FROM localhost/drupal
RUN echo 'Creating a new overlay layer by a executing a RUN action'
ADD imagefinalfolder /
WORKDIR /var/www/html
CMD [apache2-foreground]

Having Dockerfile and <imagefinalfolder> in the current directory call:
sudo docker/ podman build -t localhost/testimage .


Step 5: Test running the test image
sudo docker/ podman run -d --name testcontainer [some -e configs] localhost/testimage


Summary of alternatives for the configuration problem at an installer image:

- A1: Looking for software, the developer distributes as app files plus a Dockerfile construction plan instead of a ready build docker image. This way necessary configurations can be made before packaging as a container image. Typically the best option.
- A2: Pre-testing the container image for its configuration capability by the reproduction test shown above before starting the configuration development. If there is no alternative A1, this is usually the next best option for a container image, that includes an installer and requires configuration.
- A3: Instead of using the standard 'FROM ... RUN ... ADD' pipeline alternatively building a new flat container image with just one overlay layer from the exported data files using docker/ podman import. However, this automatically makes you the maintainer for the whole new flat image without having an (automatic) update strategy at hand. Bad option from the point of efficiency.



Reproduction test example for a linux image (off-label-use)

The author could not run the following reproduction test example explicitly on the Raspberry 4b. To be frank, the author's Raspberry is out of order and the Raspberry 4b is out of stock since month. The impendance resistors of the wifi antennas were badly soldered. After a longer not-use period they have all fallen off and the Raspberry SOC from then on screen-printed everything diagonal from the left upper corner to right lower corner (without any modifications of the sd-card image). The author's other single board computers (BananaPi, RockPi) have all passed the presented reproduction test explicitly succesful.

sudo mkdir -m 777 /media/orig
sudo losetup -fP --direct-io Armbian_23.02.2_Rpi4b_jammy_current_5.15.92.img
sudo mount -t ext4 /dev/loop0p1 /media/orig
sudo reprod.sh -g /media/orig imgfolder

cp Armbian_23.02.2_Rpi4b_jammy_current_5.15.92.img reprod.img
# sudo dd if=/dev/zero count=1000000 >> reprod.img
sudo losetup -fP --direct-io reprod.img
# sudo parted /dev/loop1 #resizepart 1
# sudo e2fsck -f /dev/loop1p1
# sudo resize2fs /dev/loop1p1
sudo mkdir -m 777 /media/reprod
sudo mount -t ext4 /dev/loop1p1 /media/reprod
cd /media/reprod
sudo find -P * -type f -print0 | sudo xargs -0 shred -zn 0
sudo rm -r *

sudo reprod.sh -m=cp imgfolder /media/reprod

sudo umount /media/* && sudo losetup -D

#-line = optional



__Enter 'bash reprod.sh --example | less' to get a scrollable view.__
